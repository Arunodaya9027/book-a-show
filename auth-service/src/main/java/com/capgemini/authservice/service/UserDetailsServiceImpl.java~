package com.capgemini.authservice.service;




import com.capgemini.authservice.dto.UserInfoDto;
import com.capgemini.authservice.entities.UserInfo;
import com.capgemini.authservice.entities.UserRole;
import com.capgemini.authservice.repository.UserRepository;
import com.capgemini.authservice.repository.UserRoleRepository;
import lombok.AllArgsConstructor;
import lombok.Data;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;

@Component
@AllArgsConstructor
@Data
public class UserDetailsServiceImpl implements UserDetailsService {


    private final UserRepository userRepository;

    @Autowired
    private final PasswordEncoder passwordEncoder;

    @Autowired
    private UserRoleRepository userRoleRepository;




    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        UserInfo user = userRepository.findByUsername(username);
        if(user == null){

            throw new UsernameNotFoundException("could not found user..!!");
        }

        return new CustomUserDetails(user);
    }

    public UserInfo checkIfUserAlreadyExist(UserInfoDto userInfoDto){
        return userRepository.findByUsername(userInfoDto.getUsername());
    }

    public Boolean signupUser(UserInfoDto userInfoDto){
        //        ValidationUtil.validateUserAttributes(userInfoDto);
        userInfoDto.setPassword(passwordEncoder.encode(userInfoDto.getPassword()));
        if(Objects.nonNull(checkIfUserAlreadyExist(userInfoDto))){
            return false;
        }
        String userId = UUID.randomUUID().toString();
        Set<UserRole> userRoles = new HashSet<>();
        for (String roleName : userInfoDto.getRoles()) {  // Iterate through role names from the DTO
            UserRole role = userRoleRepository.findByRoleName(UserRole.RoleName.valueOf(roleName));
            if (role != null) {
                userRoles.add(role);
            } else {
                // Handle the case where the role is not found (throw exception or create a default role)
                //  For this example, we throw an exception
                throw new IllegalArgumentException("Role '" + roleName + "' not found.");
            }
        }

        userRepository.save(new UserInfo(userId, userInfoDto.getUsername(), userInfoDto.getPassword(),userInfoDto.getEmail(), new HashSet<>()));

//        UserRegistrationMessage message = new UserRegistrationMessage();
//        message.setUsername(userInfoDto.getUsername());
//        message.setEmail(userInfoDto.getEmail());
//        // Set other fields
//
//        messageProducer.sendMessage(gson.toJson(message)); // Send JSON string

        return true;
    }

}